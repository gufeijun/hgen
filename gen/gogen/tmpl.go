package gogen

import (
	"text/template"
)

var (
	statementTmpl        = must(_statementTmpl)
	structTmpl           = must(_structTmpl)
	importTmpl           = must(_importTmpl)
	serviceInterfaceTmpl = must(_serviceInterfaceTmpl)
	serviceRegisterTmpl  = must(_serviceRegisterTmpl)
	initTmpl             = must(_initTmpl)
	clientStructTmpl     = must(_clientStructTmpl)
	clientMethodTmpl     = must(_clientMethodTmpl)
)

func must(tmpl string) *template.Template {
	return template.Must(template.New("").Parse(tmpl))
}

const _statementTmpl = `// This is code generated by hgen. DO NOT EDIT!!!
// hgen version: {{.Version}}
// source: {{.Source}}

`

const _structTmpl = `
type {{.Name}} struct{ 
{{- range $k,$v:=.Mems }} 
    {{.MemName}} {{.MemType.TypeName}}
{{- end }}
}
`
const _importTmpl = `
import (
{{- range . }}
    {{ . }}
{{- end }}
)
`

const _serviceInterfaceTmpl = `
type {{.Name}}Service interface{
{{- range .Methods}}
	{{ . }}
 {{- end}}
}
`

const _serviceRegisterTmpl = `
func Register{{.Name}}Service(impl {{.Name}}Service, svr *rpch.Server) {
	methods := map[string]*rpch.MethodDesc {
    {{- range .MethodDescs }}
        "{{ .MethodName }}": rpch.BuildMethodDesc(impl, "{{ .MethodName }}", "{{.RetTypeName}}"),
    {{- end }}
	}
	service := &rpch.Service{
		Impl:    impl,
        Name:    "{{ .Name }}",
		Methods: methods,
	}
	svr.Register(service)
}
`

const _initTmpl = `
func init() {
{{- range . }}
    rpch.RegisterMessage("{{.}}", new({{.}}))
{{- end}}
}
`

const _clientStructTmpl = `
type {{ . }}ServiceClient struct{
    conn *rpch.Conn
}

func New{{ . }}ServiceClient(conn *rpch.Conn) *{{ . }}ServiceClient {
    return &{{ . }}ServiceClient{
		conn: conn,
	}
}
`
const _clientMethodTmpl = `
func (c *{{.ServiceName}}ServiceClient) {{ .MethodName }}({{.RequestArg}}) ({{.ResponseArg}}) {
    resp, err := c.conn.Call("{{.ServiceName}}", "{{.MethodName}}"{{ if ne (len .CallArgs) 0}},{{ end }}
    {{- range $k,$v:=.CallArgs -}}
        {{- if ne $k 0 -}},{{ end }}
		&rpch.RequestArg{
            TypeKind: {{ .TypeKind }},
            TypeName: "{{ .TypeName }}",
            Data:     {{.Data}},
		}
    {{- end -}})
	if resp == nil {
		return
	}
	{{ .Return }}
}
`
